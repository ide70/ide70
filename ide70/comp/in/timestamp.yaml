---
unitInterface:
  descr: Date and time selector
  properties:
    startYear:
      descr: Start year
      type: int
    endYear:
      descr: End year
      type: int
    dateFormat:
      default:
        externalReference:
          fileName: ui
          key: regional.dateFormat
    timeFormat:
      default: 
        externalReference:
          fileName: ui
          key: regional.timeFormat
    value:
      type: date
    store:
      descr: Persistence key
      valueCompleter:
        completerRef: dbFieldCompleter
privateProperties:
  stage:
    descr: Date setting stage
    type: string
  yearSeleced:
    descr: the selected year
    type: string
  monthSeleced:
    descr: the selected month
    type: string
  hourSeleced:
    descr: the selected hour
    type: int
  dateSelected:
    descr: the selected date object
  stageSelection:
    type: map
  daysTable:
    type: array
  fmtValue:
    descr: Formatted date value
    type: string
    default: ""
  fmtTime:
    descr: Formatted time value
    type: string
    default: ""
  minutes:
    type: array
body: |
  <div id="{{.sid}}">
      <input type="text" class="date-input" value="{{.fmtValue}}" {{eventHandlerJs $.This "onclick" "null"}}></input>
      <input type="text" class="time-input" value="{{.fmtTime}}" {{eventHandler $.This "onclick" "onclickTime"}}></input>
      <div class="date-holder">
      {{if eq .stage "year"}}
      {{range $v := numRange .startYear .endYear }}
      <span class="date-button" {{eventHandlerWithKey $.This "onclick" "yearPressed" $v}}>{{$v}}</span>
      {{end}}
      {{end}}
      {{if eq .stage "month"}}
        {{range $k,$v := .stageSelection}}
        <span class="date-button" {{eventHandlerWithKey $.This "onclick" "monthPressed" $k}}>{{$v}}</span>
        {{end}}
      {{end}}
      {{if eq .stage "day"}}
        {{range $v := .daysTable}}
        <span class="day-button date-button{{if $v.disabled}} inactive{{end}}"
        {{if not $v.disabled}}{{eventHandlerWithKey $.This "onclick" "dayPressed" $v.day}}{{end}}>{{$v.day}}</span>
        {{end}}
      {{end}}
      {{if eq .stage "hour"}}
        {{range $v := numRange 0 23}}
        <span class="day-button date-button" {{eventHandlerWithKey $.This "onclick" "hourPressed" $v}}>{{$v}}</span>
        {{end}}
      {{end}}
      {{if eq .stage "minute"}}
        {{range $v := .minutes}}
        <span class="day-button date-button" {{eventHandlerWithKey $.This "onclick" "minutePressed" $v}}>{{$v}}</span>
        {{end}}
      {{end}}
      </div>
  </div>
eventHandlers:
  onUnitCreate:
    action: |
      CompCtx().SetProp("stage", "");
      var value = CompCtx().GetProp("value");
      value = Api().DateCtx().AsTime(value);
      CompCtx().SetProp("value", value);
      CompCtx().SetProp("fmtValue", Api().DateCtx().FormatTime(value, CompCtx().GetProp("dateFormat")));
      CompCtx().SetProp("fmtTime", Api().DateCtx().FormatTime(value, CompCtx().GetProp("timeFormat")));
  onclick:
    action: |
      CompCtx().SetProp("stage", "year").Refresh();
  onclickTime:
    action: |
      CompCtx().SetProp("stage", "hour").Refresh();
  yearPressed:
    action: |
      CompCtx().SetProp("yearSeleced", Event().EventKey());
      var months = Event().LoadCtx().LoadDictAsMap("time/months");
      CompCtx().SetProp("stageSelection", months);
      CompCtx().SetProp("stage", "month").Refresh();
  monthPressed:
    action: |
      CompCtx().SetProp("monthSeleced", Event().EventKey());
      var yearSelected = CompCtx().GetProp("yearSeleced");
      var monthSelected = Event().EventKey();
      var monthFirstDay = Api().DateCtx().PureDate(yearSelected, monthSelected, 1);
      var weekStart = monthFirstDay.Weekday();
      var tableFirstDay = monthFirstDay.AddDate(0, 0, -weekStart);
      var daysTable = Api().Arrays().NewITableW();
      for(var i=0; i<42; i++) {
        var actDate = tableFirstDay.AddDate(0, 0, i);
        daysTable.AddEmptyRow().AddCol("day", actDate.Day()).
        AddCol("disabled", actDate.Month() != monthFirstDay.Month());
      }
      CompCtx().SetProp("daysTable", daysTable.Finalize())
      CompCtx().SetProp("stage", "day").Refresh();
  dayPressed:
    action: |
      var yearSelected = CompCtx().GetProp("yearSeleced");
      var monthSelected = CompCtx().GetProp("monthSeleced");
      var daySelected = Event().EventKey();
      var dateSelected = Api().DateCtx().PureDate(yearSelected, monthSelected, daySelected);
      CompCtx().SetProp("dateSelected", dateSelected);
      CompCtx().SetProp("value", dateSelected);
      CompCtx().SetProp("fmtValue", Api().DateCtx().FormatTime(dateSelected, CompCtx().GetProp("dateFormat")));
      CompCtx().SetProp("stage", "").Refresh();
  hourPressed:
    action: |
      CompCtx().SetProp("hourSeleced", Event().EventKey());
      CompCtx().SetProp("minutes", [0,5,10,15,20,25,30,35,40,45,50,55]);
      CompCtx().SetProp("stage", "minute").Refresh();
  minutePressed:
    action: |
      var minuteSelected = Event().EventKey();
      var hourSelected = CompCtx().GetProp("hourSeleced");
      var dateSelected = CompCtx().GetProp("value");
      if(dateSelected) {
          dateSelected = Api().DateCtx().SetHour(dateSelected, hourSelected);
          dateSelected = Api().DateCtx().SetMinute(dateSelected, minuteSelected);
          CompCtx().SetProp("fmtTime", Api().DateCtx().FormatTime(dateSelected, CompCtx().GetProp("timeFormat")));
          CompCtx().SetProp("value", dateSelected);
      }
      CompCtx().SetProp("stage", "").Refresh();
injectRootComp:
  css:
    - name: comp/timestamp.css

