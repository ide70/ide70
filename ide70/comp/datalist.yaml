---
unitInterface:
  descr: CRUD data list
  properties:
    columns:
      descr: Columns of data list
      mapHead: yes
      children:
        header:
          descr: Column header title
          listHead: yes
          children:
            key:
              descr: Name of data key to display in columns cells
              valueCompleter:
                yamlPathCompleter:
                  folderPrefix: dcfg/schema
                  fileNameExpr: ../../dbTableName
                  pathExpr: "columns[%].name:value"
                  filterExpr: "compType[%].columns[%].key:value"
            items:
              descr: Sub components to display in columns cells
              mapHead: yes
              children:
                cr:
                  descr: Component reference to display
                  listHead: yes
                  valueCompleter:
                    yamlPathCompleter:
                      self: yes
                      pathExpr: "[%].cr:value"
    dbTableName:
      descr: Name of db table to query
      valueCompleter:
        fileNameCompleter:
          folderPrefix: dcfg/schema
          trimSuffix: .yaml
body: |
  <table class="datatable">
  <tr>
  {{range $column := .columns}}
    <th>{{$column.header}}</th>
  {{end}}
  </tr>
  {{range $i, $dataRow := .DataSet}}
  <tr>
    {{range $column := $.columns}}
    <td>
    {{if $column.key}}{{index $dataRow $column.key}}{{end}}
    {{range $child := $column.items}}
    {{generateComp $.This $child.cr $i $dataRow}}
    {{end}}
    </td>
    {{end}}
  </tr>
  {{end}}
  </table>
eventHandlers:
  onUnitCreate:
    action: |
        var dbTableName = CompByCr("").GetProp("dbTableName");
        var data = Event().DBCtx().WorksheetFindItemsPage(dbTableName , 0, 25);
        CompByCr("").SetProp("DataSet", data);
injectRootComp:
  css:
    - name: comp/dataTable.css
