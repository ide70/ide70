---
methods:
  eventHandler:
    descr: Attach event handler to HTML element
    params:
      - descr: Current component
        fixedValue: "$.This"
      - descr: JS event name
        valueCompleter:
          dictCompleter:
            dictName: htmlEvents
            quote: '"'
      - descr: Event handler event name (optional)
        valueCompleter:
          yamlPathCompleter:
            self: yes
            pathExpr: "eventHandlers.%$"
            pathNodes: yes
            quote: '"'
      - descr: JS value object (optional)
        valueCompleter:
          dictCompleter:
            dictName: htmlJsValueExamples
            quote: '"'
  eventHandlerJs:
    descr: Attach event handler to HTML element
    params:
      - descr: Current component
        fixedValue: "$.This"
      - descr: JS event name
        valueCompleter:
          dictCompleter:
            dictName: htmlEvents
            quote: '"'
      - descr: JS value object
        valueCompleter:
          dictCompleter:
            dictName: htmlJsValueExamples
            quote: '"'
  eventHandlerFileUpload:
    descr: Attach upload event handler to HTML element
    params:
      - descr: Current component
        fixedValue: "$.This"
      - descr: JS event name
        valueCompleter:
          dictCompleter:
            dictName: htmlEvents
            quote: '"'
      - descr: Event handler event name (optional)
        valueCompleter:
          yamlPathCompleter:
            self: yes
            pathExpr: "eventHandlers.%$"
            pathNodes: yes
            quote: '"'
  eventHandlerFileDownload:
    descr: Attach event handler to HTML file input element
    params:
      - descr: Current component
        fixedValue: "$.This"
      - descr: Event handler event name
        valueCompleter:
          yamlPathCompleter:
            self: yes
            pathExpr: "eventHandlers.%$"
            pathNodes: yes
            quote: '"'
  eventHandlerWithKey:
    descr: Attach event handler to HTML element
    params:
      - descr: Current component
        fixedValue: "$.This"
      - descr: JS event name
        valueCompleter:
          dictCompleter:
            dictName: htmlEvents
            quote: '"'
      - descr: Event handler event name
        valueCompleter:
          yamlPathCompleter:
            self: yes
            pathExpr: "eventHandlers.%$"
            pathNodes: yes
            quote: '"'
      - descr: Key to pass to event handler, arbitary string
        fixedValue: '""'
  generateComp:
    descr: Inject sub-component by cloning source component
    params:
      - descr: Current component
        fixedValue: "$.This"
      - descr: Source component reference
        valueCompleter:
          union:
            - templateCompleter:
                filters:
                  type: string
            - yamlPathCompleter:
                self: yes
                pathExpr: "[%].cr:value"
                quote: '"'
      - descr: Unique id among sub components
        valueCompleter:
          templateCompleter:
      - descr: Context attached to sub component
        valueCompleter:
          templateCompleter:
  generateSubComp:
    descr: Inject sub-component by cloning source component
    params:
      - descr: Component Generation Context
        valueCompleter:
          templateCompleter:
            filters:
              type: GenerationContext
  dropSubComp:
    descr: Remove existing sub-component
    params:
      - descr: Component Generation Context
        valueCompleter:
          templateCompleter:
            filters:
              type: GenerationContext
  linearContext:
    descr: Creates context for linear sub component generation
    type: GenerationContext
    params: 
      - descr: Current component
        fixedValue: "$.This"
      - descr: Child component / child component reference
        valueCompleter:
          templateCompleter:
            filters:
              type: string
      - descr: linear index
        valueCompleter:
          templateCompleter:
            filters:
              type: int
  range:
    closeTag: end
    descr: loop over array/map
    params:
      - descr: loop variable(s)
        valueCompleter:
          dictCompleter:
            dictName: templateLoopVars
      - descr: assignment operator
        fixedValue: ":="
      - descr: object to iterate over OR iterator function
        valueCompleter:
          union:
            - templateCompleter:
                filters:
                  kind: iterator
            - templateCompleter:
                filters:
                  type: array
            - templateCompleter:
                filters:
                  type: map
  hasIndex:
    descr: check if given element of map or array exists
    type: boolean
    params:
      - descr: map or array
        valueCompleter:
          union:
            - templateCompleter:
                filters:
                  type: array
            - templateCompleter:
                filters:
                  type: map
      - descr: key or index
        valueCompleter:
          union:
            - templateCompleter:
                filters:
                  type: int
            - templateCompleter:
                filters:
                  type: string
  if:
    closeTag: end
    descr: conditional block
    params:
      - descr: condition
        valueCompleter:
          templateCompleter:
            filters:
              type: boolean
  index:
    descr: access map value by key
    params:
      - descr: map
        valueCompleter:
          templateCompleter:
            filters:
              type: map
      - descr: key
        valueCompleter:
          templateCompleter:
  eq:
    descr: Returns the boolean truth of arg1 == arg2
    kind: internal
    type: boolean
    params:
      - descr: Equals check first arg
        valueCompleter:
          templateCompleter:
      - descr: Equals check second arg
        valueCompleter:
          templateCompleter:
  not:
    descr: Negate truth of argument
    kind: internal
    type: boolean
    params:
      - descr: Boolean arg
        valueCompleter:
          templateCompleter:
  numRange:
    descr: Iterates over a numeric range
    kind: iterator
    params:
      - descr: Range from
        valueCompleter:
          templateCompleter:
            filters:
              type: int
      - descr: Range to
        valueCompleter:
          templateCompleter:
            filters:
              type: int
  numRangeOpenEnd:
    descr: Iterates over a numeric range not including end
    kind: iterator
    params:
      - descr: Range from
        valueCompleter:
          templateCompleter:
            filters:
              type: int
      - descr: Range to
        valueCompleter:
          templateCompleter:
            filters:
              type: int
#eq
#	Returns the boolean truth of arg1 == arg2
#ne
#	Returns the boolean truth of arg1 != arg2
#lt
#	Returns the boolean truth of arg1 < arg2
#le
#	Returns the boolean truth of arg1 <= arg2
#gt
#	Returns the boolean truth of arg1 > arg2
#ge
#	Returns the boolean truth of arg1 >= arg2
