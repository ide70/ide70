---
#        - cnrLabeledRow2:
#          - inPrefixSuggestSeat
#          - inSelectionClass
- compType: page
  tree:
    - ticketHeader:
      - textboxTicketCode
      - textboxPassengerName
      - inSelectionStartFrom
      - inTimestampStartDate
    - cnrRepeat:
      - labeledTable:
        - cnrLabeledRow:
          - inPrefixSuggestFlight
          - inSelectionDestination
          - inTimestampDepart
          - inTimestampArrival
        - cnrLabeledRow2:
          - inPrefixSuggestSeat
    - ticketFooter:
      - textboxPrice
      - inSelectionCurrency
      - inMultiSelectListExtraServices
      - document
    - buttonSave
  inputs:
    ticketId: Id of ticket database entity
- compType: hlp/dbhelper
  tableName: ticket
  dbIdInputName: ticketId
  cr: hlpDbhelper
  eventHandlers:
    afterSaveData:
      action: |
        Event().LoadParent();
- compType: labeledTable
  cr: ticketHeader
- compType: labeledTable
  cr: ticketFooter
- compType: textbox
  label: Ticket code
  store: ticket_code
  cr: textboxTicketCode
- compType: textbox
  label: Passenger Name
  store: passenger_name
  cr: textboxPassengerName
- compType: in/selection
  dictionaryFile: airport
  label: Start from
  cr: inSelectionStartFrom
  store: startFrom
- compType: in/timestamp
  label: Start date
  cr: inTimestampStartDate
  store: startDate
  startYear: 2022
  endYear: 2026
  value:
    calc: |
      Api().DateCtx().Now();
- compType: cnr/repeat
  cr: cnrRepeat
  store: reservationConn
- compType: labeledTable
  cr: labeledTable
- compType: cnr/labeledRow
  cr: cnrLabeledRow
  label: Flight
- compType: cnr/labeledRow
  cr: cnrLabeledRow2
  label: Seat
- compType: in/prefixSuggest
  eventHandlers:
    filter: 
      action: |
        var repeatIndex = CompCtx().RepeatIdx();
        var fromComp = (repeatIndex == 0) ? CompByCr("inSelectionStartFrom"):
        CompCtx().CompByIndexAndCrInRepeat(repeatIndex-1, "inSelectionDestination");
        var startDateComp = (repeatIndex == 0) ? CompByCr("inTimestampStartDate"):
        CompCtx().CompByIndexAndCrInRepeat(repeatIndex-1, "inTimestampArrival");
        Api().Logger().Info("fromComp:",fromComp);
        var from = fromComp.GetProp("value");
        Api().Logger().Info("from:",from);
        var startDate = startDateComp.GetProp("value");
        Api().Logger().Info("startDate:",startDate);
        var q = CompCtx().DBCtx().QueryCtx();
        var flight = q.Table("flight");
        var searchText = Event().GetParam("searchPrefix");
        q.From(flight).Select(flight._id,flight.flight_id,flight.destination,flight.departure,flight.arrival).
        Where(flight.destination.Like("%"+searchText+"%").And(flight.from.Equals(from)).And(flight.departure.Gt(startDate))).
        AscendingBy(flight.departure).List();
    lookupSelectedData:
      action: |
        var dataKey = Event().GetParam("dataKey");
        var q = CompCtx().DBCtx().QueryCtx();
        var flight = q.Table("flight");
        q.From(flight).Select(flight.flight_id, flight.destination, flight.departure, flight.arrival).
        Where(flight._id.Equals(dataKey)).OneRow();
  searchResultDisplayColumns:
    - flight_id
    - destination
    - departure
  descrColumn: flight_id
  keyColumn: id
  additionalFields: 
    - cr: inSelectionDestination
      columnName: destination
    - cr: inTimestampDepart
      columnName: departure
    - cr: inTimestampArrival
      columnName: arrival
  store: flight_id
  cr: inPrefixSuggestFlight
- compType: in/selection
  dictionaryFile: airport
  label: Destination
  cr: inSelectionDestination
  readonly: yes
  allowEmpty: yes
- compType: in/timestamp
  label: Depart
  cr: inTimestampDepart
  readonly: yes
- compType: in/timestamp
  label: Arrival
  cr: inTimestampArrival
  readonly: yes
- compType: in/prefixSuggest
  eventHandlers:
    filter: 
      action: |
        var q = CompCtx().DBCtx().QueryCtx();
        var flightId = CompByCr("inPrefixSuggestFlight").GetProp("value");
        var airplane = q.Table("airplane");
        var flight = airplane.JoinedTable("flightMConn");
        var seat = airplane.JoinedTable("seatMConn");
        var reserv = flight.JoinedTable("flightReservationMConn");
        var reservJoin = reserv.GetJoin().JoinTypeLeftOuter();
        var reservCond = reservJoin.GetJoinCodition().And(seat._id.Equals(reserv.seat_id));
        reservJoin.ReplacejoinCondition(reservCond);
        var searchText = Event().GetParam("searchPrefix");
        q.From(airplane).Select(seat._id, seat.code, seat.class, seat.window).
        Where(flight._id.Equals(flightId).And(reserv.seat_id.IsNull()).And(seat.code.Like('%'+searchText+'%').OrEmpty(searchText))).
        AscendingBy(seat.code).List();
    lookupSelectedData:
      action: |
        var q = CompCtx().DBCtx().QueryCtx();
        var dataKey = Event().GetParam("dataKey");
        var seat = q.Table("seat");
        q.From(seat).Select(seat.code, seat.class).Where(seat._id.Equals(dataKey)).OneRow();
  searchResultDisplayColumns:
    - code
    - class
    - window
  descrColumn: code
  keyColumn: id
  minPrefixLength: 0
  store: seat_id
  cr: inPrefixSuggestSeat
  additionalFields:
    - cr: inSelectionClass
      columnName: class
- compType: textbox
  store: note
  cr: textboxNote
- compType: cnr/repeat
  label: Special Notes
  store: specNotes
  cr: cnrRepeatSpecialNotes
- compType: in/selection
  dictionaryFile: seatClass
  label: Class
  cr: inSelectionClass
  readonly: yes
  allowEmpty: yes
- compType: textbox
  label: Price
  cr: textboxPrice
  store: priceConn.sum
- compType: in/selection
  dictionaryFile: currency
  label: Currency
  cr: inSelectionCurrency
  store: priceConn.currency
  allowEmpty: true
- compType: in/multiSelectList
  label: Extra services
  dictionaryFile: extraServices
  cr: inMultiSelectListExtraServices
  store: extra_services
- compType: in/file
  cr: document
  label: Document
  store: document
  blobConnection: documentConn
- compType: button
  text: Save
  eventHandlers:
    onclick:
      action: |
        CompByCr("hlpDbhelper").ForwardEvent("saveData");
  cr: buttonSave
