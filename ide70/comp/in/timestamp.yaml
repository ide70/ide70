---
unitInterface:
  descr: Date and time selector
  properties:
    startYear:
      descr: Start year
      type: int
    endYear:
      descr: End year
      type: int
privateProperties:
  stage:
    descr: Date setting stage
    type: string
  yearSeleced:
    descr: the selected year
    type: string
  monthSeleced:
    descr: the selected month
    type: string
  daySeleced:
    descr: the selected day
    type: string
  stageSelection:
    type: map
  daysTable:
    type: array
  fmtValue:
    descr: Formatted date value
    type: string
body: |
  <div id="{{.sid}}">
      <input type="text" value="{{.fmtValue}}" {{eventHandlerJs $.This "onclick" "null"}}></input>
      <div class="date-holder">
      {{if eq .stage "year"}}
      {{range $v := numRange .startYear .endYear }}
      <span class="date-button" {{eventHandlerWithKey $.This "onclick" "yearPressed" $v}}>{{$v}}</span>
      {{end}}
      {{end}}
      {{if eq .stage "month"}}
        {{range $k,$v := .stageSelection}}
        <span class="date-button" {{eventHandlerWithKey $.This "onclick" "monthPressed" $k}}>{{$v}}</span>
        {{end}}
      {{end}}
      {{if eq .stage "day"}}
        {{range $v := .daysTable}}
        <span class="day-button date-button{{if $v.disabled}} inactive{{end}}"
        {{if not $v.disabled}}{{eventHandlerWithKey $.This "onclick" "dayPressed" $v.day}}{{end}}>{{$v.day}}</span>
        {{end}}
      {{end}}
      </div>
  </div>
eventHandlers:
  onUnitCreate:
    action: |
      CompCtx().SetProp("stage", "");
  onclick:
    action: |
      CompCtx().SetProp("stage", "year").Refresh();
  yearPressed:
    action: |
      CompCtx().SetProp("yearSeleced", Event().EventKey());
      var months = Event().LoadCtx().LoadDictAsMap("time/months");
      CompCtx().SetProp("stageSelection", months);
      CompCtx().SetProp("stage", "month").Refresh();
  monthPressed:
    action: |
      CompCtx().SetProp("monthSeleced", Event().EventKey());
      var yearSelected = CompCtx().GetProp("yearSeleced");
      var monthSelected = Event().EventKey();
      var monthFirstDay = Api().DateCtx().PureDate(yearSelected, monthSelected, 1);
      var weekStart = monthFirstDay.Weekday();
      var tableFirstDay = monthFirstDay.AddDate(0, 0, -weekStart);
      var daysTable = Api().Arrays().NewITableW();
      for(var i=0; i<42; i++) {
        var actDate = tableFirstDay.AddDate(0, 0, i);
        daysTable.AddEmptyRow().AddCol("day", actDate.Day()).
        AddCol("disabled", actDate.Month() != monthFirstDay.Month());
      }
      CompCtx().SetProp("daysTable", daysTable.Finalize())
      CompCtx().SetProp("stage", "day").Refresh();
  dayPressed:
    action: |
      CompCtx().SetProp("daySeleced", Event().EventKey());
      var yearSelected = CompCtx().GetProp("yearSeleced");
      var monthSelected = CompCtx().GetProp("monthSeleced");
      var daySelected = CompCtx().GetProp("daySeleced");
      var dateSelected = Api().DateCtx().PureDate(yearSelected, monthSelected, daySelected);
      CompCtx().SetProp("fmtValue", Api().DateCtx().FormatTime(dateSelected, "yyyy.MM.dd"));
      CompCtx().SetProp("stage", "").Refresh();
injectRootComp:
  css:
    - name: comp/timestamp.css

