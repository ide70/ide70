---
unitInterface:
  descr: File upload
  properties:
    value:
      descr: File data
      type: map
    blobConnection:
      descr: Connection to blob table
      valueCompleter:
        completerRef: dbFieldCompleter
      default: data
    store:
      descr: Persistence key
      valueCompleter:
        completerRef: dbFieldCompleter
    showDownload:
      descr: Show download link, default yes
      default: yes
      type: boolean
  events:
    onUploadComplete:
      descr: Fires when upload completes
      params:
        binaryData: Binary data of the uploaded file
subParts: 
  file:
    descr: File details
privateProperties:
  fileName:
    descr: File Name
  progress:
    descr: upload progress
    default: -1
body: |
  <div id="{{.sid}}">
    <input type="file" class="upload" {{eventHandlerFileUpload $.This "onchange" "fileUpload"}}>
    <span id="{{.sid}}file">{{if .fileName}}File: {{.fileName}}{{end}}
      {{if ne $.progress -1}}<div class="progess-holder">
        <div class="progress-bar" style="width: {{.progress}}%"></div>
      </div>{{end}}
      {{if $.showDownload}}
      {{if $.value}}<a href="{{eventHandlerFileDownload $.This "download"}}">Download</a>{{end}}
      {{end}}
    </span>
  </div>
eventHandlers:
  fileUpload:
    action: |
      Api().Logger().Info("upl.");
      if(CompCtx().UploadCtx()) {
          CompCtx().SetProp("fileName", CompCtx().UploadCtx().GetFileName());
      }
      CompCtx().SetProp("progress", 0);
      CompCtx().Timer(500, "uploadProgress").RefreshSubComp("file");
  uploadProgress:
    action: |
      Api().Logger().Info("progress.");
      CompCtx().SetProp("progress", CompCtx().UploadCtx().GetPercent()).RefreshSubComp("file");
      if(!CompCtx().UploadCtx().Finished()) {
          CompCtx().Timer(500, "uploadProgress")
      } else {
          var upload = Api().Arrays().NewSIMap();
          upload.Put(CompCtx().GetProp("blobConnection"), CompCtx().UploadCtx().GetData());
          upload.Put("mimeType", CompCtx().UploadCtx().GetMimeType());
          upload.Put("fileName", CompCtx().UploadCtx().GetFileName());
          CompCtx().SetProp("value", upload);
          CompCtx().SetProp("progress", 100);
          CompCtx().ForwardEvent("onUploadComplete").AddForwardParam("binaryData", CompCtx().UploadCtx().GetData());
      }
  download:
    action: |
      Api().Logger().Info("download");
      var value = CompCtx().GetPropToCast("value").AsMap();
      Api().Logger().Info("download0", value);
      CompCtx().SetBinaryResponse(value.Get("mimeType"), value.Get(CompCtx().GetProp("blobConnection")));
      Api().Logger().Info("send response as", value.Get("mimeType"));
  onUnitCreate:
    action: |
      var value = CompCtx().GetPropToCast("value").AsMap();
      if(value) {
          CompCtx().SetProp("fileName", value.Get("fileName"));
      }
  onUploadComplete:
    action: |
      ;
injectRootComp:
  css:
    - name: comp/file.css
