---
unitInterface:
  descr: DB helper
  events:
    saveData:
      descr: Call this event handler to save form data
    afterSaveData:
      descr: Called after saveData, place post save actions here
  properties:
    dbIdInputName:
      descr: Name of input parameter holding database entity id
      valueCompleter:
        yamlPathCompleter:
          self: yes
          pathExpr: "[0].inputs.%"
    tableName:
      descr: Name of database table
      valueCompleter:
        fileNameCompleter:
          folderPrefix: dcfg/schema
          trimSuffix: .yaml
    updateSet:
      descr: Data object set when updating data
privateProperties:
  initializatonFinished:
    descr: Initializaton finished flag. No component data initialization if ture
    default: false
injectToUnit:
  initialEventList:
    - onDBOLoad
    - onDataLoad
    - onUnitCreate
  postRenderEventList:
    - onRenderFinished
injectToComp:
  - filter:
      hasProp: store
    defs:
      eventHandlers:
        onDataLoad:
          action: |
            Api().Logger().Info("odl:", CompCtx().Comp().ChildRefId());
            var crDbHelper = CompCtx().GetUnit().GetProp("crDbHelper");
            var dbHelper = CompByCr(crDbHelper);
            var updateSet = dbHelper.GetPropToCast("updateSet").AsUpdateSet();
            var initializatonFinished = dbHelper.GetProp("initializatonFinished");
            if(!updateSet.IsNew() && !initializatonFinished) {
                var storeKey = CompCtx().GetProp("store");
                Api().Logger().Info("storeKey:", storeKey);
                CompCtx().SetProp("value", updateSet.DataLookup(storeKey));
            }
copyPropertyToUnit:
  - srcProp: cr
    dstProp: crDbHelper
eventHandlers:
  onDBOLoad:
    action: |
      var dbIdInputName = CompCtx().GetProp("dbIdInputName");
      var dbTableName = CompCtx().GetProp("tableName");
      Api().Logger().Info("passParams", Event().GetUnit().GetPassParams());
      var dbId = Event().GetUnit().GetPassParams().Get(dbIdInputName);
      Api().Logger().Info("dbId", dbId);
      var dbo = null;
      if(dbId) {
        dbo = Event().DBCtx().FindDBO(dbTableName, dbId);
      }
      if(!dbo) {
          dbo = Event().DBCtx().CreateNewDBO(dbTableName);
      }
      var updateSet = Event().DBCtx().CreateDBOUpdateSet(dbo);
      CompCtx().SetProp("updateSet", updateSet);
  onRenderFinished:
    action: |
      CompCtx().SetProp("initializatonFinished", true);
  saveData:
    action: |
      var formData = Event().GetUnit().CollectStored();
      var dbTableName = CompCtx().GetProp("tableName");
      var updateSet = CompCtx().GetPropToCast("updateSet").AsUpdateSet();
      updateSet.UpdateWithData(formData);
      updateSet.Save();
      CompCtx().ForwardEvent("afterSaveData");
      
      /* var formData = Event().GetUnit().CollectStored();
      var dbTableName = CompCtx().GetProp("tableName");
      var dbo = CompCtx().GetPropToCast("dataObject").AsDBO();
      if(dbo) {
        dbo.UpdateData(formData);
      } else {
        dbo = Event().DBCtx().CreateDBO(formData, dbTableName);
      }
      dbo.Save();
      CompCtx().ForwardEvent("afterSaveData"); */
  afterSaveData:
    action: |
      "";
