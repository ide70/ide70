---
unitInterface:
  descr: Date and time selector
  properties:
    startYear:
      descr: Start year
      type: int
    endYear:
      descr: End year
      type: int
privateProperties:
  stage:
    descr: Date setting stage
    type: string
  yearSeleced:
    descr: the selected year
    type: string
  stageSelection:
    type: map
body: |
  <div id="{{.sid}}">
      <input type="text" {{eventHandlerJs $.This "onclick" "null"}}></input>
      <div class="date-holder">
      {{if eq .stage "year"}}
      {{range $v := numRange .startYear .endYear }}
      <span class="date-button" {{eventHandlerWithKey $.This "onclick" "yearPressed" $v}}>{{$v}}</span>
      {{end}}
      {{end}}
      {{if eq .stage "month"}}
        {{range $k,$v := .stageSelection}}
        <span class="date-button" {{eventHandlerWithKey $.This "onclick" "monthPressed" $k}}>{{$v}}</span>
        {{end}}
      {{end}}
      </div>
  </div>
eventHandlers:
  onUnitCreate:
    action: |
      CompCtx().SetProp("stage", "");
  onclick:
    action: |
      CompCtx().SetProp("stage", "year").Refresh();
  yearPressed:
    action: |
      CompCtx().SetProp("yearSeleced", Event().EventKey());
      var months = Event().LoadCtx().LoadDictAsMap("time/months");
      CompCtx().SetProp("stageSelection", months);
      CompCtx().SetProp("stage", "month").Refresh();
  monthPressed:
    action: |
      var yearSelected = CompCtx().GetProp("yearSeleced");
      var monthSelected = Event().EventKey();
      Api().Logger().Info("ys:",yearSelected);
      Api().Logger().Info("ms:",monthSelected);
      var monthFirstDay = Api().DateCtx().PureDate(yearSelected, monthSelected, 1);
      var weekStart = monthFirstDay.Weekday();
      Api().Logger().Info(monthFirstDay, "is", weekStart);
      var tableFirstDay = monthFirstDay.AddDate(0, 0, -weekStart);
      var daysTable = Api().Arrays().NewITable();
      for i=0; i<42; i++ {
        var actDate = tableFirstDay.AddDate(0, 0, i);
        daysTable.AddEmptyRow().AddCol("day", actDate).
        AddCol("avail", !actDate.Before(monthFirstDay)).
        AddCol("key", i);
      }
      CompCtx().SetProp("stage", "").Refresh();
injectRootComp:
  css:
    - name: comp/timestamp.css
#func calcMonth(startDay, actDay) {
#    cols = arr.Make2DArr(7)
#    firstDayOfMonth = startDay.AddDate(0,0,1-startDay.Day())
#    firstDayOfWeek = firstDayOfMonth.Weekday()
#    firstDayOfWeek = ( firstDayOfWeek + 6) % 7
#    currDay = firstDayOfMonth.AddDate(0,0,-firstDayOfWeek)
#    for i=0; i<42; i++ {
#        var active = startDay.Month() == currDay.Month()
#        var current = active && currDay.Day() == actDay
#        item = { "date": currDay, "day": currDay.Day(), "active": active, "current": current }
#        cols[i%7] += item
#        currDay = currDay.AddDate(0,0,1)
#    }
#    return cols
#}
