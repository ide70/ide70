---
unitInterface:
  descr: Suggest results in dropdown box as user type letters
  events:
    filter:
      descr: Logic that collects search results
      params:
        searchPrefix: The search prefix that the user typed in
    select: Logic that processes selected item
    initDescr:
      descr: Logic that collects description from dataKey
      params:
        dataKey: Data key to look up description
  properties:
    label:
      descr: Label
    descrColumn:
      descr: Column name in result row that loaded into search field
    keyColumn:
      descr: Column name in result row that provides unique id of selection
    valueDescr:
      descr: Selected item description displayed in search field
      default: ""
    value:
      descr: Key of selected item
    searchResultDisplayColumns:
      type: array
      descr: Columns of search result to display is search results
      mapHead: true
      children:
        any:
          descr: Column name 
          listHead: true
          singleKey: true
    store:
      descr: Persistence key
      valueCompleter:
        completerRef: dbFieldCompleter
privateProperties:
  resultSet:
    descr: Result of user's current search expression
    type: array
  selectedRow:
    descr: Selected item
    type: map
subParts: 
  options: Table of selectable options
body: |
  <div id="{{.sid}}">
    <form autocomplete="off" method="post" action="" class="suggest-form">
    <input class="suggest-input" type="text" autocomplete="off"
    value="{{.valueDescr}}" id="{{.sid}}typein" {{eventHandler $.This "oninput" "preFilter" "this.value"}}></input>
    </form>
    <div class="suggest-holder" id="{{.sid}}options">
      <table class="suggest-table">
      {{range $rowIdx,$resultRow := .resultSet}}
        <tr class="suggest-row" {{eventHandlerWithKey $.This "onclick" "preSelect" $rowIdx}}>
          {{range $colName := $.searchResultDisplayColumns}}
          <td>
          {{index $resultRow $colName}}
          </td>
          {{end}}
        </tr>
      {{end}}
      </table>
    </div>
  </div>
eventHandlers:
  preFilter:
    action: |
      var fieldValue = Event().EventKey();
      if(!fieldValue) {
        CompCtx().RemoveProp("resultSet");
        CompCtx().RefreshSubComp("options");
        CompCtx().RemoveProp("value");
      } else {
        CompCtx().ForwardEvent("filter").AddForwardParam("searchPrefix",fieldValue).RefreshSubComp("options");
      }
  filter:
    action: |
      Api().Logger().Info("key typed");
    propertyKey: resultSet
  preSelect:
    action: |
      var resultSet = CompCtx().GetPropToCast("resultSet").AsITable();
      var selectedRow = resultSet.Get(Event().EventKey());
      CompCtx().SetProp("selectedRow", selectedRow);
      CompCtx().RemoveProp("resultSet");
      CompCtx().ForwardEvent("select").RefreshSubComp("options");
  select:
    action: |
      Api().Logger().Info("item selected");
      if(CompCtx().HasProp("descrColumn")) {
          CompCtx().SetProp("valueDescr",
          CompCtx().GetPropToCast("selectedRow").AsMap().Get(CompCtx().GetProp("descrColumn")));
          CompCtx().RefreshSubComp("typein");
      }
      if(CompCtx().HasProp("keyColumn")) {
          CompCtx().SetProp("value",
          CompCtx().GetPropToCast("selectedRow").AsMap().Get(CompCtx().GetProp("keyColumn")));
      }
  onUnitCreate:
    action: |
      CompCtx().ForwardEvent("initDescr").AddForwardParam("dataKey",CompCtx().GetProp("value"));
  initDescr:
    action: |
      "";
    propertyKey: valueDescr
injectRootComp:
  css:
    - name: comp/suggest.css
